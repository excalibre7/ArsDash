import React, { useEffect, useState } from "react";
import { render } from "react-dom";
import { AgGridColumn, AgGridReact } from "ag-grid-react";
import {
  Paper,
  Typography,
  TablePagination,
  Collapse,
  IconButton,
  Popover,
} from "@material-ui/core";
import { makeStyles } from "@material-ui/core/styles";
import "../stylesheets/grid.css";
import useWindowDimensions from "../hooks/useWindowDimensions";
import "../stylesheets/App.css";
import ArrowUpwardIcon from "@material-ui/icons/ArrowUpward";
import ArrowDownwardIcon from "@material-ui/icons/ArrowDownward";
import RemoveIcon from "@material-ui/icons/Remove";
import { Save } from "@material-ui/icons";
import "../stylesheets/custom.css";
import "../stylesheets/react-contextmenu.css";

const useStyles = makeStyles((theme) => ({
  confidence: {
    color: "#000000",
    paddingTop: theme.spacing(1.4),
    fontSize: "0.75rem",
  },
  status: {
    color: "#ffffff",
    height: "2.3rem",
    paddingTop: theme.spacing(0.9),
  },
  statusTxt: {
    fontSize: "13px",
  },
  paginate: {
    paddingTop: theme.spacing(2),
  },
  filter: {
    color: "#ffffff",
    height: "3.5vh",
  },
  iconb: {
    padding: theme.spacing(0, 0, 0, 0.5),
    "&:hover": {
      backgroundColor: "rgba(0,0,0,0)",
    },
  },
  iconstage: {
    padding: theme.spacing(0, 0, 0, 0),
  },
}));

const ActiveOrderDataGrid = (props) => {
  const classes = useStyles();
  const {
    rows,
    currentSort,
    setCurrentSort,
    columnState,
    setColumnState,
  } = props;
  const divRef = React.useRef(null);
  const [gridApi, setGridApi] = useState(null);
  const [gridColumnApi, setGridColumnApi] = useState(null);
  const [dimensions, setDimensions] = useState({ width: null, height: null });
  const [page, setPage] = React.useState(0);
  const [rowsPerPage, setRowsPerPage] = React.useState(50);
  var myRows = rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);
  const [saveCount, setSaveCount] = useState(0);
  const [anchorEl, setAnchorEl] = React.useState(null);
  const [col, setCol] = useState([]);

  const handlePageChange = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const columnWidth = (percentage) => {
    if (divRef.current != null) {
      var width = null;
      if (divRef.current.clientWidth > 1000) {
        width = (divRef.current.clientWidth * percentage) / 100; // Pixel calculation
      } else {
        width = (1000 * percentage) / 100;
      }
      return width;
    }
  };
  const handleColPopClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleColPopClose = () => {
    setAnchorEl(null);
  };
  const colPopOpen = Boolean(anchorEl);
  const id = colPopOpen ? "simple-popover" : undefined;

  const getBgColor = (status, code) => {
    if (code == "MAIN") {
      if (status == 1) {
        return "#00b803"; //COLOR 77b897
      } else if (status == 0) {
        return "#e60e0e"; //COLOR e2634e
      }
    } else if (code == "TIMELINE") {
      if (status == "On Time") {
        return "#8ccfa1"; //COLOR
      } else if (status == "Delayed") {
        return "#ed9d90"; //COLORed9d90
      }
    }
  };

  const updateWindowDimensions = () => {
    setDimensions({ width: window.innerWidth, height: window.innerHeight });
  };

  const getSetColumns = () => {
    var columns = [
      {
        resizable: true,
        width: columnWidth(9),
        headerName: currentSort,
        field: "ORDER_ID",
        headerComponentFramework: (params) => {
          if (currentSort == "no-a") {
            return (
              <div className="headerDiv">
                Order No
                <IconButton
                  className={classes.iconb}
                  disableRipple={true}
                  onClick={() => sortingInterface("no-d")}
                >
                  <ArrowDownwardIcon className={classes.filter} />
                </IconButton>
              </div>
            );
          } else if (currentSort == "no-d") {
            return (
              <div className="headerDiv">
                Order No
                <IconButton
                  className={classes.iconb}
                  disableRipple={true}
                  onClick={() => sortingInterface("no-a")}
                >
                  <ArrowUpwardIcon className={classes.filter} />
                </IconButton>
              </div>
            );
          } else {
            return (
              <div className="headerDiv">
                Order No
                <IconButton
                  className={classes.iconb}
                  disableRipple={true}
                  onClick={() => sortingInterface("no-a")}
                >
                  <RemoveIcon className={classes.filter} />
                </IconButton>
              </div>
            );
          }
        },
      },
      {
        resizable: true,
        cellStyle: { "white-space": "normal", "line-height": 1.5 },
        width: columnWidth(14),
        headerName: "Vendor",
        field: "VENDOR",
        cellRendererFramework: (params) => (
          <div
            style={{
              paddingTop: 10,
            }}
          >
            {params.data.VENDOR}
          </div>
        ),
      },
      {
        resizable: true,
        width: columnWidth(10),
        cellStyle: { "white-space": "normal", "line-height": 1.5 },
        headerName: "Brand",
        field: "BRAND",
        cellRendererFramework: (params) => (
          <div
            style={{
              paddingTop: 10,
            }}
          >
            {params.data.BRAND}
          </div>
        ),
      },
      {
        resizable: true,
        width: columnWidth(10),
        headerName: currentSort,
        field: "ORDER_DATE",
        headerComponentFramework: (params) => {
          if (currentSort == "ord-a") {
            return (
              <div className="headerDiv">
                Order
                <IconButton
                  className={classes.iconb}
                  disableRipple={true}
                  onClick={() => sortingInterface("ord-d")}
                >
                  <ArrowDownwardIcon className={classes.filter} />
                </IconButton>
              </div>
            );
          } else if (currentSort == "ord-d") {
            return (
              <div className="headerDiv">
                Order
                <IconButton
                  className={classes.iconb}
                  disableRipple={true}
                  onClick={() => sortingInterface("ord-a")}
                >
                  <ArrowUpwardIcon className={classes.filter} />
                </IconButton>
              </div>
            );
          } else {
            return (
              <div className="headerDiv">
                Order
                <IconButton
                  className={classes.iconb}
                  disableRipple={true}
                  onClick={() => sortingInterface("ord-a")}
                >
                  <RemoveIcon className={classes.filter} />
                </IconButton>
              </div>
            );
          }
        },
      },
      {
        resizable: true,
        width: columnWidth(7),
        headerName: currentSort,
        field: "QTY",
        headerComponentFramework: (params) => {
          if (currentSort == "qty-a") {
            return (
              <div className="headerDiv">
                Qty
                <IconButton
                  className={classes.iconb}
                  disableRipple={true}
                  onClick={() => sortingInterface("qty-d")}
                >
                  <ArrowDownwardIcon className={classes.filter} />
                </IconButton>
              </div>
            );
          } else if (currentSort == "qty-d") {
            return (
              <div className="headerDiv">
                Qty
                <IconButton
                  className={classes.iconb}
                  disableRipple={true}
                  onClick={() => sortingInterface("qty-a")}
                >
                  <ArrowUpwardIcon className={classes.filter} />
                </IconButton>
              </div>
            );
          } else {
            return (
              <div className="headerDiv">
                Qty
                <IconButton
                  className={classes.iconb}
                  disableRipple={true}
                  onClick={() => sortingInterface("qty-a")}
                >
                  <RemoveIcon className={classes.filter} />
                </IconButton>
              </div>
            );
          }
        },
      },
      {
        resizable: true,
        width: columnWidth(9),
        headerName: currentSort,
        field: "GRN_COMMIT_DATE",
        headerComponentFramework: (params) => {
          if (currentSort == "del-a") {
            return (
              <div className="headerDiv">
                Delivery
                <IconButton
                  className={classes.iconb}
                  disableRipple={true}
                  onClick={() => sortingInterface("del-d")}
                >
                  <ArrowDownwardIcon className={classes.filter} />
                </IconButton>
              </div>
            );
          } else if (currentSort == "del-d") {
            return (
              <div className="headerDiv">
                Delivery
                <IconButton
                  className={classes.iconb}
                  disableRipple={true}
                  onClick={() => sortingInterface("del-a")}
                >
                  <ArrowUpwardIcon className={classes.filter} />
                </IconButton>
              </div>
            );
          } else {
            return (
              <div className="headerDiv">
                Delivery
                <IconButton
                  className={classes.iconb}
                  disableRipple={true}
                  onClick={() => sortingInterface("del-a")}
                >
                  <RemoveIcon className={classes.filter} />
                </IconButton>
              </div>
            );
          }
        },
      },
      {
        width: columnWidth(9),
        headerName: "Status",
        field: "PREDICT_ON_TIME",
        cellRendererFramework: (params) => (
          <div
            align="center"
            style={{
              paddingTop: 10,
            }}
          >
            <Paper
              className={classes.status}
              style={{
                color: "#fff",
                maxWidth: 80,
                backgroundColor: getBgColor(
                  params.data.PREDICT_ON_TIME,
                  "MAIN"
                ),
              }}
            >
              <Typography className={classes.statusTxt} align="center">
                {params.data.PREDICT_ON_TIME == 0 ? "Delayed" : "On Time"}
              </Typography>
              <Typography className={classes.confidence}>
                {params.data.PREDICT_CONFIDENCE}
              </Typography>
            </Paper>
          </div>
        ),
      },
      {
        resizable: true,
        width: columnWidth(11),
        headerName: "Current Stage",
        field: "LATEST_ACTIVITY_NAME",
        cellStyle: { "white-space": "normal", "line-height": 1.5 },
        cellRendererFramework: (params) => (
          <div
            style={{
              paddingTop: 10,
            }}
          >
            {params.data.LATEST_ACTIVITY_NAME}
          </div>
        ),
        headerComponentFramework: (params) => {
          if (currentSort == "cs-a") {
            return (
              <div className="headerDiv">
                Current Stage
                <IconButton
                  className={classes.iconb}
                  disableRipple={true}
                  onClick={() => sortingInterface("cs-d")}
                >
                  <ArrowDownwardIcon className={classes.filter} />
                </IconButton>
              </div>
            );
          } else if (currentSort == "cs-d") {
            return (
              <div className="headerDiv">
                Current Stage
                <IconButton
                  className={classes.iconb}
                  disableRipple={true}
                  onClick={() => sortingInterface("cs-a")}
                >
                  <ArrowUpwardIcon className={classes.filter} />
                </IconButton>
              </div>
            );
          } else {
            return (
              <div className="headerDiv">
                Current Stage
                <IconButton
                  className={classes.iconb}
                  disableRipple={true}
                  onClick={() => sortingInterface("cs-a")}
                >
                  <RemoveIcon className={classes.filter} />
                </IconButton>
              </div>
            );
          }
        },
      },
      {
        resizable: true,
        width: columnWidth(11),
        headerName: "Predicted Delivery",
        field: "PREDICT_DATE",
      },
      {
        width: columnWidth(10),
        headerName: "Final Inspection",
        field: "PREDICT_FINAL_INSPECTION",
        cellRendererFramework: (params) => (
          <div
            align="center"
            style={{
              paddingTop: 10,
            }}
          >
            <Paper
              className={classes.status}
              style={{
                color: "#fff",
                maxWidth: 80,
                backgroundColor: getBgColor(
                  params.data.PREDICT_FINAL_INSPECTION,
                  "MAIN"
                ),
              }}
            >
              <Typography className={classes.statusTxt} align="center">
                {params.data.PREDICT_FINAL_INSPECTION == 0 ? "Fail" : "Pass"}
              </Typography>
              <Typography className={classes.confidence}>
                {params.data.PREDICT_CONFIDENCE_FINAL_INSP}
              </Typography>
            </Paper>
          </div>
        ),
      },
    ];

    if (columnState != null) {
      var duplicate = [];
      columnState.forEach((e) => {
        columns.forEach((i) => {
          if (e.colId == i.field) {
            i.width = e.width;
            duplicate.push(i);
          }
        });
      });
      setCol(duplicate);
    } else {
      setCol(columns);
    }
  };

  useEffect(() => {
    window.addEventListener("resize", updateWindowDimensions);
    updateWindowDimensions();
    getSetColumns();
  }, []);

  const sortingInterface = (param) => {
    setCurrentSort(param);
    if (gridApi != null) {
      gridApi.refreshCells();
    }
  };

  const setSave = () => {
    setSaveCount(saveCount + 1);
    if (saveCount + 1 == 1) {
      Restore(columnState);
    }
    if (gridColumnApi != null) {
      setColumnState(gridColumnApi.getColumnState());
    }
  };

  const Restore = (last) => {
    gridColumnApi.applyColumnState({
      state: last,
      applyOrder: true,
    });
  };

  const onGridReady = (params) => {
    setGridApi(params.api);
    setGridColumnApi(params.columnApi);
  };

  const gridOptions = {
    rowStyle: { background: "#F5F5F5" },
    getRowStyle: (params) => {
      if (params.node.rowIndex % 2 === 1) {
        return { background: "#FFFFFF" };
      }
    },
    rowHeight: 70,
    alwaysShowVerticalScroll: false,
    suppressColumnMoveAnimation: true,
  };

  return (
    <div>
      <div
        ref={divRef}
        className="ag-theme-alpine"
        style={{
          height: dimensions.height - 120,
          width: "100%",
        }}
      >
        {/* <button onClick={() => Restore()}>Restore</button>
      <button onClick={() => setSave()}>Save</button> */}
        <AgGridReact
          gridOptions={gridOptions}
          columnDefs={col}
          suppressDragLeaveHidesColumns={true}
          onGridReady={onGridReady}
          rowData={myRows}
          suppressCellSelection={true}
          onColumnResized={setSave}
          onColumnMoved={setSave}
        ></AgGridReact>
        <TablePagination
          rowsPerPageOptions={[25, 50, 100]}
          component="div"
          count={rows.length}
          rowsPerPage={rowsPerPage}
          page={page}
          onChangePage={handlePageChange}
          onChangeRowsPerPage={handleChangeRowsPerPage}
        />
      </div>
    </div>
  );
};

export default ActiveOrderDataGrid;
